/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PhotosSummary {
  /// The number of photos
  #[serde(rename = "count")]
  count: Option<i32>,
  #[serde(rename = "primary")]
  primary: Option<::models::PhotosSummaryPrimary>
}

impl PhotosSummary {
  pub fn new() -> PhotosSummary {
    PhotosSummary {
      count: None,
      primary: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> PhotosSummary {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_primary(&mut self, primary: ::models::PhotosSummaryPrimary) {
    self.primary = Some(primary);
  }

  pub fn with_primary(mut self, primary: ::models::PhotosSummaryPrimary) -> PhotosSummary {
    self.primary = Some(primary);
    self
  }

  pub fn primary(&self) -> Option<&::models::PhotosSummaryPrimary> {
    self.primary.as_ref()
  }

  pub fn reset_primary(&mut self) {
    self.primary = None;
  }

}



