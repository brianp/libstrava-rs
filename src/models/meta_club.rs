/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MetaClub {
  /// The club's unique identifier.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
  #[serde(rename = "resource_state")]
  resource_state: Option<i32>,
  /// The club's name.
  #[serde(rename = "name")]
  name: Option<String>
}

impl MetaClub {
  pub fn new() -> MetaClub {
    MetaClub {
      id: None,
      resource_state: None,
      name: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> MetaClub {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_resource_state(&mut self, resource_state: i32) {
    self.resource_state = Some(resource_state);
  }

  pub fn with_resource_state(mut self, resource_state: i32) -> MetaClub {
    self.resource_state = Some(resource_state);
    self
  }

  pub fn resource_state(&self) -> Option<&i32> {
    self.resource_state.as_ref()
  }

  pub fn reset_resource_state(&mut self) {
    self.resource_state = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> MetaClub {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



