/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummaryActivity {
  /// The unique identifier of the activity
  #[serde(rename = "id")]
  id: Option<i64>,
  /// The identifier provided at upload time
  #[serde(rename = "external_id")]
  external_id: Option<String>,
  /// The identifier of the upload that resulted in this activity
  #[serde(rename = "upload_id")]
  upload_id: Option<i64>,
  #[serde(rename = "athlete")]
  athlete: Option<::models::MetaAthlete>,
  /// The name of the activity
  #[serde(rename = "name")]
  name: Option<String>,
  /// The activity's distance, in meters
  #[serde(rename = "distance")]
  distance: Option<f32>,
  /// The activity's moving time, in seconds
  #[serde(rename = "moving_time")]
  moving_time: Option<i32>,
  /// The activity's elapsed time, in seconds
  #[serde(rename = "elapsed_time")]
  elapsed_time: Option<i32>,
  /// The activity's total elevation gain.
  #[serde(rename = "total_elevation_gain")]
  total_elevation_gain: Option<f32>,
  /// The activity's highest elevation, in meters
  #[serde(rename = "elev_high")]
  elev_high: Option<f32>,
  /// The activity's lowest elevation, in meters
  #[serde(rename = "elev_low")]
  elev_low: Option<f32>,
  #[serde(rename = "type")]
  _type: Option<::models::ActivityType>,
  /// The time at which the activity was started.
  #[serde(rename = "start_date")]
  start_date: Option<String>,
  /// The time at which the activity was started in the local timezone.
  #[serde(rename = "start_date_local")]
  start_date_local: Option<String>,
  /// The timezone of the activity
  #[serde(rename = "timezone")]
  timezone: Option<String>,
  #[serde(rename = "start_latlng")]
  start_latlng: Option<::models::LatLng>,
  #[serde(rename = "end_latlng")]
  end_latlng: Option<::models::LatLng>,
  /// The number of achievements gained during this activity
  #[serde(rename = "achievement_count")]
  achievement_count: Option<i32>,
  /// The number of kudos given for this activity
  #[serde(rename = "kudos_count")]
  kudos_count: Option<i32>,
  /// The number of comments for this activity
  #[serde(rename = "comment_count")]
  comment_count: Option<i32>,
  /// The number of athletes for taking part in a group activity
  #[serde(rename = "athlete_count")]
  athlete_count: Option<i32>,
  /// The number of Instagram photos for this activity
  #[serde(rename = "photo_count")]
  photo_count: Option<i32>,
  /// The number of Instagram and Strava photos for this activity
  #[serde(rename = "total_photo_count")]
  total_photo_count: Option<i32>,
  #[serde(rename = "map")]
  map: Option<::models::PolylineMap>,
  /// Whether this activity was recorded on a training machine
  #[serde(rename = "trainer")]
  trainer: Option<bool>,
  /// Whether this activity is a commute
  #[serde(rename = "commute")]
  commute: Option<bool>,
  /// Whether this activity was created manually
  #[serde(rename = "manual")]
  manual: Option<bool>,
  /// Whether this activity is private
  #[serde(rename = "private")]
  private: Option<bool>,
  /// Whether this activity is flagged
  #[serde(rename = "flagged")]
  flagged: Option<bool>,
  /// The activity's workout type
  #[serde(rename = "workout_type")]
  workout_type: Option<i32>,
  /// The unique identifier of the upload in string format
  #[serde(rename = "upload_id_str")]
  upload_id_str: Option<String>,
  /// The activity's average speed, in meters per second
  #[serde(rename = "average_speed")]
  average_speed: Option<f32>,
  /// The activity's max speed, in meters per second
  #[serde(rename = "max_speed")]
  max_speed: Option<f32>,
  /// Whether the logged-in athlete has kudoed this activity
  #[serde(rename = "has_kudoed")]
  has_kudoed: Option<bool>,
  /// The id of the gear for the activity
  #[serde(rename = "gear_id")]
  gear_id: Option<String>,
  /// The total work done in kilojoules during this activity. Rides only
  #[serde(rename = "kilojoules")]
  kilojoules: Option<f32>,
  /// Average power output in watts during this activity. Rides only
  #[serde(rename = "average_watts")]
  average_watts: Option<f32>,
  /// Whether the watts are from a power meter, false if estimated
  #[serde(rename = "device_watts")]
  device_watts: Option<bool>,
  /// Rides with power meter data only
  #[serde(rename = "max_watts")]
  max_watts: Option<i32>,
  /// Similar to Normalized Power. Rides with power meter data only
  #[serde(rename = "weighted_average_watts")]
  weighted_average_watts: Option<i32>
}

impl SummaryActivity {
  pub fn new() -> SummaryActivity {
    SummaryActivity {
      id: None,
      external_id: None,
      upload_id: None,
      athlete: None,
      name: None,
      distance: None,
      moving_time: None,
      elapsed_time: None,
      total_elevation_gain: None,
      elev_high: None,
      elev_low: None,
      _type: None,
      start_date: None,
      start_date_local: None,
      timezone: None,
      start_latlng: None,
      end_latlng: None,
      achievement_count: None,
      kudos_count: None,
      comment_count: None,
      athlete_count: None,
      photo_count: None,
      total_photo_count: None,
      map: None,
      trainer: None,
      commute: None,
      manual: None,
      private: None,
      flagged: None,
      workout_type: None,
      upload_id_str: None,
      average_speed: None,
      max_speed: None,
      has_kudoed: None,
      gear_id: None,
      kilojoules: None,
      average_watts: None,
      device_watts: None,
      max_watts: None,
      weighted_average_watts: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> SummaryActivity {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_external_id(&mut self, external_id: String) {
    self.external_id = Some(external_id);
  }

  pub fn with_external_id(mut self, external_id: String) -> SummaryActivity {
    self.external_id = Some(external_id);
    self
  }

  pub fn external_id(&self) -> Option<&String> {
    self.external_id.as_ref()
  }

  pub fn reset_external_id(&mut self) {
    self.external_id = None;
  }

  pub fn set_upload_id(&mut self, upload_id: i64) {
    self.upload_id = Some(upload_id);
  }

  pub fn with_upload_id(mut self, upload_id: i64) -> SummaryActivity {
    self.upload_id = Some(upload_id);
    self
  }

  pub fn upload_id(&self) -> Option<&i64> {
    self.upload_id.as_ref()
  }

  pub fn reset_upload_id(&mut self) {
    self.upload_id = None;
  }

  pub fn set_athlete(&mut self, athlete: ::models::MetaAthlete) {
    self.athlete = Some(athlete);
  }

  pub fn with_athlete(mut self, athlete: ::models::MetaAthlete) -> SummaryActivity {
    self.athlete = Some(athlete);
    self
  }

  pub fn athlete(&self) -> Option<&::models::MetaAthlete> {
    self.athlete.as_ref()
  }

  pub fn reset_athlete(&mut self) {
    self.athlete = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> SummaryActivity {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_distance(&mut self, distance: f32) {
    self.distance = Some(distance);
  }

  pub fn with_distance(mut self, distance: f32) -> SummaryActivity {
    self.distance = Some(distance);
    self
  }

  pub fn distance(&self) -> Option<&f32> {
    self.distance.as_ref()
  }

  pub fn reset_distance(&mut self) {
    self.distance = None;
  }

  pub fn set_moving_time(&mut self, moving_time: i32) {
    self.moving_time = Some(moving_time);
  }

  pub fn with_moving_time(mut self, moving_time: i32) -> SummaryActivity {
    self.moving_time = Some(moving_time);
    self
  }

  pub fn moving_time(&self) -> Option<&i32> {
    self.moving_time.as_ref()
  }

  pub fn reset_moving_time(&mut self) {
    self.moving_time = None;
  }

  pub fn set_elapsed_time(&mut self, elapsed_time: i32) {
    self.elapsed_time = Some(elapsed_time);
  }

  pub fn with_elapsed_time(mut self, elapsed_time: i32) -> SummaryActivity {
    self.elapsed_time = Some(elapsed_time);
    self
  }

  pub fn elapsed_time(&self) -> Option<&i32> {
    self.elapsed_time.as_ref()
  }

  pub fn reset_elapsed_time(&mut self) {
    self.elapsed_time = None;
  }

  pub fn set_total_elevation_gain(&mut self, total_elevation_gain: f32) {
    self.total_elevation_gain = Some(total_elevation_gain);
  }

  pub fn with_total_elevation_gain(mut self, total_elevation_gain: f32) -> SummaryActivity {
    self.total_elevation_gain = Some(total_elevation_gain);
    self
  }

  pub fn total_elevation_gain(&self) -> Option<&f32> {
    self.total_elevation_gain.as_ref()
  }

  pub fn reset_total_elevation_gain(&mut self) {
    self.total_elevation_gain = None;
  }

  pub fn set_elev_high(&mut self, elev_high: f32) {
    self.elev_high = Some(elev_high);
  }

  pub fn with_elev_high(mut self, elev_high: f32) -> SummaryActivity {
    self.elev_high = Some(elev_high);
    self
  }

  pub fn elev_high(&self) -> Option<&f32> {
    self.elev_high.as_ref()
  }

  pub fn reset_elev_high(&mut self) {
    self.elev_high = None;
  }

  pub fn set_elev_low(&mut self, elev_low: f32) {
    self.elev_low = Some(elev_low);
  }

  pub fn with_elev_low(mut self, elev_low: f32) -> SummaryActivity {
    self.elev_low = Some(elev_low);
    self
  }

  pub fn elev_low(&self) -> Option<&f32> {
    self.elev_low.as_ref()
  }

  pub fn reset_elev_low(&mut self) {
    self.elev_low = None;
  }

  pub fn set_type(&mut self, _type: ::models::ActivityType) {
    self._type = Some(_type);
  }

  pub fn with_type(mut self, _type: ::models::ActivityType) -> SummaryActivity {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ActivityType> {
    self._type.as_ref()
  }

  pub fn reset_type(&mut self) {
    self._type = None;
  }

  pub fn set_start_date(&mut self, start_date: String) {
    self.start_date = Some(start_date);
  }

  pub fn with_start_date(mut self, start_date: String) -> SummaryActivity {
    self.start_date = Some(start_date);
    self
  }

  pub fn start_date(&self) -> Option<&String> {
    self.start_date.as_ref()
  }

  pub fn reset_start_date(&mut self) {
    self.start_date = None;
  }

  pub fn set_start_date_local(&mut self, start_date_local: String) {
    self.start_date_local = Some(start_date_local);
  }

  pub fn with_start_date_local(mut self, start_date_local: String) -> SummaryActivity {
    self.start_date_local = Some(start_date_local);
    self
  }

  pub fn start_date_local(&self) -> Option<&String> {
    self.start_date_local.as_ref()
  }

  pub fn reset_start_date_local(&mut self) {
    self.start_date_local = None;
  }

  pub fn set_timezone(&mut self, timezone: String) {
    self.timezone = Some(timezone);
  }

  pub fn with_timezone(mut self, timezone: String) -> SummaryActivity {
    self.timezone = Some(timezone);
    self
  }

  pub fn timezone(&self) -> Option<&String> {
    self.timezone.as_ref()
  }

  pub fn reset_timezone(&mut self) {
    self.timezone = None;
  }

  pub fn set_start_latlng(&mut self, start_latlng: ::models::LatLng) {
    self.start_latlng = Some(start_latlng);
  }

  pub fn with_start_latlng(mut self, start_latlng: ::models::LatLng) -> SummaryActivity {
    self.start_latlng = Some(start_latlng);
    self
  }

  pub fn start_latlng(&self) -> Option<&::models::LatLng> {
    self.start_latlng.as_ref()
  }

  pub fn reset_start_latlng(&mut self) {
    self.start_latlng = None;
  }

  pub fn set_end_latlng(&mut self, end_latlng: ::models::LatLng) {
    self.end_latlng = Some(end_latlng);
  }

  pub fn with_end_latlng(mut self, end_latlng: ::models::LatLng) -> SummaryActivity {
    self.end_latlng = Some(end_latlng);
    self
  }

  pub fn end_latlng(&self) -> Option<&::models::LatLng> {
    self.end_latlng.as_ref()
  }

  pub fn reset_end_latlng(&mut self) {
    self.end_latlng = None;
  }

  pub fn set_achievement_count(&mut self, achievement_count: i32) {
    self.achievement_count = Some(achievement_count);
  }

  pub fn with_achievement_count(mut self, achievement_count: i32) -> SummaryActivity {
    self.achievement_count = Some(achievement_count);
    self
  }

  pub fn achievement_count(&self) -> Option<&i32> {
    self.achievement_count.as_ref()
  }

  pub fn reset_achievement_count(&mut self) {
    self.achievement_count = None;
  }

  pub fn set_kudos_count(&mut self, kudos_count: i32) {
    self.kudos_count = Some(kudos_count);
  }

  pub fn with_kudos_count(mut self, kudos_count: i32) -> SummaryActivity {
    self.kudos_count = Some(kudos_count);
    self
  }

  pub fn kudos_count(&self) -> Option<&i32> {
    self.kudos_count.as_ref()
  }

  pub fn reset_kudos_count(&mut self) {
    self.kudos_count = None;
  }

  pub fn set_comment_count(&mut self, comment_count: i32) {
    self.comment_count = Some(comment_count);
  }

  pub fn with_comment_count(mut self, comment_count: i32) -> SummaryActivity {
    self.comment_count = Some(comment_count);
    self
  }

  pub fn comment_count(&self) -> Option<&i32> {
    self.comment_count.as_ref()
  }

  pub fn reset_comment_count(&mut self) {
    self.comment_count = None;
  }

  pub fn set_athlete_count(&mut self, athlete_count: i32) {
    self.athlete_count = Some(athlete_count);
  }

  pub fn with_athlete_count(mut self, athlete_count: i32) -> SummaryActivity {
    self.athlete_count = Some(athlete_count);
    self
  }

  pub fn athlete_count(&self) -> Option<&i32> {
    self.athlete_count.as_ref()
  }

  pub fn reset_athlete_count(&mut self) {
    self.athlete_count = None;
  }

  pub fn set_photo_count(&mut self, photo_count: i32) {
    self.photo_count = Some(photo_count);
  }

  pub fn with_photo_count(mut self, photo_count: i32) -> SummaryActivity {
    self.photo_count = Some(photo_count);
    self
  }

  pub fn photo_count(&self) -> Option<&i32> {
    self.photo_count.as_ref()
  }

  pub fn reset_photo_count(&mut self) {
    self.photo_count = None;
  }

  pub fn set_total_photo_count(&mut self, total_photo_count: i32) {
    self.total_photo_count = Some(total_photo_count);
  }

  pub fn with_total_photo_count(mut self, total_photo_count: i32) -> SummaryActivity {
    self.total_photo_count = Some(total_photo_count);
    self
  }

  pub fn total_photo_count(&self) -> Option<&i32> {
    self.total_photo_count.as_ref()
  }

  pub fn reset_total_photo_count(&mut self) {
    self.total_photo_count = None;
  }

  pub fn set_map(&mut self, map: ::models::PolylineMap) {
    self.map = Some(map);
  }

  pub fn with_map(mut self, map: ::models::PolylineMap) -> SummaryActivity {
    self.map = Some(map);
    self
  }

  pub fn map(&self) -> Option<&::models::PolylineMap> {
    self.map.as_ref()
  }

  pub fn reset_map(&mut self) {
    self.map = None;
  }

  pub fn set_trainer(&mut self, trainer: bool) {
    self.trainer = Some(trainer);
  }

  pub fn with_trainer(mut self, trainer: bool) -> SummaryActivity {
    self.trainer = Some(trainer);
    self
  }

  pub fn trainer(&self) -> Option<&bool> {
    self.trainer.as_ref()
  }

  pub fn reset_trainer(&mut self) {
    self.trainer = None;
  }

  pub fn set_commute(&mut self, commute: bool) {
    self.commute = Some(commute);
  }

  pub fn with_commute(mut self, commute: bool) -> SummaryActivity {
    self.commute = Some(commute);
    self
  }

  pub fn commute(&self) -> Option<&bool> {
    self.commute.as_ref()
  }

  pub fn reset_commute(&mut self) {
    self.commute = None;
  }

  pub fn set_manual(&mut self, manual: bool) {
    self.manual = Some(manual);
  }

  pub fn with_manual(mut self, manual: bool) -> SummaryActivity {
    self.manual = Some(manual);
    self
  }

  pub fn manual(&self) -> Option<&bool> {
    self.manual.as_ref()
  }

  pub fn reset_manual(&mut self) {
    self.manual = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> SummaryActivity {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_flagged(&mut self, flagged: bool) {
    self.flagged = Some(flagged);
  }

  pub fn with_flagged(mut self, flagged: bool) -> SummaryActivity {
    self.flagged = Some(flagged);
    self
  }

  pub fn flagged(&self) -> Option<&bool> {
    self.flagged.as_ref()
  }

  pub fn reset_flagged(&mut self) {
    self.flagged = None;
  }

  pub fn set_workout_type(&mut self, workout_type: i32) {
    self.workout_type = Some(workout_type);
  }

  pub fn with_workout_type(mut self, workout_type: i32) -> SummaryActivity {
    self.workout_type = Some(workout_type);
    self
  }

  pub fn workout_type(&self) -> Option<&i32> {
    self.workout_type.as_ref()
  }

  pub fn reset_workout_type(&mut self) {
    self.workout_type = None;
  }

  pub fn set_upload_id_str(&mut self, upload_id_str: String) {
    self.upload_id_str = Some(upload_id_str);
  }

  pub fn with_upload_id_str(mut self, upload_id_str: String) -> SummaryActivity {
    self.upload_id_str = Some(upload_id_str);
    self
  }

  pub fn upload_id_str(&self) -> Option<&String> {
    self.upload_id_str.as_ref()
  }

  pub fn reset_upload_id_str(&mut self) {
    self.upload_id_str = None;
  }

  pub fn set_average_speed(&mut self, average_speed: f32) {
    self.average_speed = Some(average_speed);
  }

  pub fn with_average_speed(mut self, average_speed: f32) -> SummaryActivity {
    self.average_speed = Some(average_speed);
    self
  }

  pub fn average_speed(&self) -> Option<&f32> {
    self.average_speed.as_ref()
  }

  pub fn reset_average_speed(&mut self) {
    self.average_speed = None;
  }

  pub fn set_max_speed(&mut self, max_speed: f32) {
    self.max_speed = Some(max_speed);
  }

  pub fn with_max_speed(mut self, max_speed: f32) -> SummaryActivity {
    self.max_speed = Some(max_speed);
    self
  }

  pub fn max_speed(&self) -> Option<&f32> {
    self.max_speed.as_ref()
  }

  pub fn reset_max_speed(&mut self) {
    self.max_speed = None;
  }

  pub fn set_has_kudoed(&mut self, has_kudoed: bool) {
    self.has_kudoed = Some(has_kudoed);
  }

  pub fn with_has_kudoed(mut self, has_kudoed: bool) -> SummaryActivity {
    self.has_kudoed = Some(has_kudoed);
    self
  }

  pub fn has_kudoed(&self) -> Option<&bool> {
    self.has_kudoed.as_ref()
  }

  pub fn reset_has_kudoed(&mut self) {
    self.has_kudoed = None;
  }

  pub fn set_gear_id(&mut self, gear_id: String) {
    self.gear_id = Some(gear_id);
  }

  pub fn with_gear_id(mut self, gear_id: String) -> SummaryActivity {
    self.gear_id = Some(gear_id);
    self
  }

  pub fn gear_id(&self) -> Option<&String> {
    self.gear_id.as_ref()
  }

  pub fn reset_gear_id(&mut self) {
    self.gear_id = None;
  }

  pub fn set_kilojoules(&mut self, kilojoules: f32) {
    self.kilojoules = Some(kilojoules);
  }

  pub fn with_kilojoules(mut self, kilojoules: f32) -> SummaryActivity {
    self.kilojoules = Some(kilojoules);
    self
  }

  pub fn kilojoules(&self) -> Option<&f32> {
    self.kilojoules.as_ref()
  }

  pub fn reset_kilojoules(&mut self) {
    self.kilojoules = None;
  }

  pub fn set_average_watts(&mut self, average_watts: f32) {
    self.average_watts = Some(average_watts);
  }

  pub fn with_average_watts(mut self, average_watts: f32) -> SummaryActivity {
    self.average_watts = Some(average_watts);
    self
  }

  pub fn average_watts(&self) -> Option<&f32> {
    self.average_watts.as_ref()
  }

  pub fn reset_average_watts(&mut self) {
    self.average_watts = None;
  }

  pub fn set_device_watts(&mut self, device_watts: bool) {
    self.device_watts = Some(device_watts);
  }

  pub fn with_device_watts(mut self, device_watts: bool) -> SummaryActivity {
    self.device_watts = Some(device_watts);
    self
  }

  pub fn device_watts(&self) -> Option<&bool> {
    self.device_watts.as_ref()
  }

  pub fn reset_device_watts(&mut self) {
    self.device_watts = None;
  }

  pub fn set_max_watts(&mut self, max_watts: i32) {
    self.max_watts = Some(max_watts);
  }

  pub fn with_max_watts(mut self, max_watts: i32) -> SummaryActivity {
    self.max_watts = Some(max_watts);
    self
  }

  pub fn max_watts(&self) -> Option<&i32> {
    self.max_watts.as_ref()
  }

  pub fn reset_max_watts(&mut self) {
    self.max_watts = None;
  }

  pub fn set_weighted_average_watts(&mut self, weighted_average_watts: i32) {
    self.weighted_average_watts = Some(weighted_average_watts);
  }

  pub fn with_weighted_average_watts(mut self, weighted_average_watts: i32) -> SummaryActivity {
    self.weighted_average_watts = Some(weighted_average_watts);
    self
  }

  pub fn weighted_average_watts(&self) -> Option<&i32> {
    self.weighted_average_watts.as_ref()
  }

  pub fn reset_weighted_average_watts(&mut self) {
    self.weighted_average_watts = None;
  }

}



