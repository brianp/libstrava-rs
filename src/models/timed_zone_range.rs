/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TimedZoneRange : A union type representing the time spent in a given zone.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TimedZoneRange {
  /// The minimum value in the range.
  #[serde(rename = "min")]
  min: Option<i32>,
  /// The maximum value in the range.
  #[serde(rename = "max")]
  max: Option<i32>,
  /// The number of seconds spent in this zone
  #[serde(rename = "time")]
  time: Option<i32>
}

impl TimedZoneRange {
  /// A union type representing the time spent in a given zone.
  pub fn new() -> TimedZoneRange {
    TimedZoneRange {
      min: None,
      max: None,
      time: None
    }
  }

  pub fn set_min(&mut self, min: i32) {
    self.min = Some(min);
  }

  pub fn with_min(mut self, min: i32) -> TimedZoneRange {
    self.min = Some(min);
    self
  }

  pub fn min(&self) -> Option<&i32> {
    self.min.as_ref()
  }

  pub fn reset_min(&mut self) {
    self.min = None;
  }

  pub fn set_max(&mut self, max: i32) {
    self.max = Some(max);
  }

  pub fn with_max(mut self, max: i32) -> TimedZoneRange {
    self.max = Some(max);
    self
  }

  pub fn max(&self) -> Option<&i32> {
    self.max.as_ref()
  }

  pub fn reset_max(&mut self) {
    self.max = None;
  }

  pub fn set_time(&mut self, time: i32) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i32) -> TimedZoneRange {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i32> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

}



