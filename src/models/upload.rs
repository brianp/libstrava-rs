/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Upload {
  /// The unique identifier of the upload
  #[serde(rename = "id")]
  id: Option<i64>,
  /// The unique identifier of the upload in string format
  #[serde(rename = "id_str")]
  id_str: Option<String>,
  /// The external identifier of the upload
  #[serde(rename = "external_id")]
  external_id: Option<String>,
  /// The error associated with this upload
  #[serde(rename = "error")]
  error: Option<String>,
  /// The status of this upload
  #[serde(rename = "status")]
  status: Option<String>,
  /// The identifier of the activity this upload resulted into
  #[serde(rename = "activity_id")]
  activity_id: Option<i64>
}

impl Upload {
  pub fn new() -> Upload {
    Upload {
      id: None,
      id_str: None,
      external_id: None,
      error: None,
      status: None,
      activity_id: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> Upload {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_id_str(&mut self, id_str: String) {
    self.id_str = Some(id_str);
  }

  pub fn with_id_str(mut self, id_str: String) -> Upload {
    self.id_str = Some(id_str);
    self
  }

  pub fn id_str(&self) -> Option<&String> {
    self.id_str.as_ref()
  }

  pub fn reset_id_str(&mut self) {
    self.id_str = None;
  }

  pub fn set_external_id(&mut self, external_id: String) {
    self.external_id = Some(external_id);
  }

  pub fn with_external_id(mut self, external_id: String) -> Upload {
    self.external_id = Some(external_id);
    self
  }

  pub fn external_id(&self) -> Option<&String> {
    self.external_id.as_ref()
  }

  pub fn reset_external_id(&mut self) {
    self.external_id = None;
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> Upload {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> Upload {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_activity_id(&mut self, activity_id: i64) {
    self.activity_id = Some(activity_id);
  }

  pub fn with_activity_id(mut self, activity_id: i64) -> Upload {
    self.activity_id = Some(activity_id);
    self
  }

  pub fn activity_id(&self) -> Option<&i64> {
    self.activity_id.as_ref()
  }

  pub fn reset_activity_id(&mut self) {
    self.activity_id = None;
  }

}



