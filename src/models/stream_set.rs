/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StreamSet {
  #[serde(rename = "time")]
  time: Option<::models::TimeStream>,
  #[serde(rename = "distance")]
  distance: Option<::models::DistanceStream>,
  #[serde(rename = "latlng")]
  latlng: Option<::models::LatLngStream>,
  #[serde(rename = "altitude")]
  altitude: Option<::models::AltitudeStream>,
  #[serde(rename = "velocity_smooth")]
  velocity_smooth: Option<::models::SmoothVelocityStream>,
  #[serde(rename = "heartrate")]
  heartrate: Option<::models::HeartrateStream>,
  #[serde(rename = "cadence")]
  cadence: Option<::models::CadenceStream>,
  #[serde(rename = "watts")]
  watts: Option<::models::PowerStream>,
  #[serde(rename = "temp")]
  temp: Option<::models::TemperatureStream>,
  #[serde(rename = "moving")]
  moving: Option<::models::MovingStream>,
  #[serde(rename = "grade_smooth")]
  grade_smooth: Option<::models::SmoothGradeStream>
}

impl StreamSet {
  pub fn new() -> StreamSet {
    StreamSet {
      time: None,
      distance: None,
      latlng: None,
      altitude: None,
      velocity_smooth: None,
      heartrate: None,
      cadence: None,
      watts: None,
      temp: None,
      moving: None,
      grade_smooth: None
    }
  }

  pub fn set_time(&mut self, time: ::models::TimeStream) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: ::models::TimeStream) -> StreamSet {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&::models::TimeStream> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

  pub fn set_distance(&mut self, distance: ::models::DistanceStream) {
    self.distance = Some(distance);
  }

  pub fn with_distance(mut self, distance: ::models::DistanceStream) -> StreamSet {
    self.distance = Some(distance);
    self
  }

  pub fn distance(&self) -> Option<&::models::DistanceStream> {
    self.distance.as_ref()
  }

  pub fn reset_distance(&mut self) {
    self.distance = None;
  }

  pub fn set_latlng(&mut self, latlng: ::models::LatLngStream) {
    self.latlng = Some(latlng);
  }

  pub fn with_latlng(mut self, latlng: ::models::LatLngStream) -> StreamSet {
    self.latlng = Some(latlng);
    self
  }

  pub fn latlng(&self) -> Option<&::models::LatLngStream> {
    self.latlng.as_ref()
  }

  pub fn reset_latlng(&mut self) {
    self.latlng = None;
  }

  pub fn set_altitude(&mut self, altitude: ::models::AltitudeStream) {
    self.altitude = Some(altitude);
  }

  pub fn with_altitude(mut self, altitude: ::models::AltitudeStream) -> StreamSet {
    self.altitude = Some(altitude);
    self
  }

  pub fn altitude(&self) -> Option<&::models::AltitudeStream> {
    self.altitude.as_ref()
  }

  pub fn reset_altitude(&mut self) {
    self.altitude = None;
  }

  pub fn set_velocity_smooth(&mut self, velocity_smooth: ::models::SmoothVelocityStream) {
    self.velocity_smooth = Some(velocity_smooth);
  }

  pub fn with_velocity_smooth(mut self, velocity_smooth: ::models::SmoothVelocityStream) -> StreamSet {
    self.velocity_smooth = Some(velocity_smooth);
    self
  }

  pub fn velocity_smooth(&self) -> Option<&::models::SmoothVelocityStream> {
    self.velocity_smooth.as_ref()
  }

  pub fn reset_velocity_smooth(&mut self) {
    self.velocity_smooth = None;
  }

  pub fn set_heartrate(&mut self, heartrate: ::models::HeartrateStream) {
    self.heartrate = Some(heartrate);
  }

  pub fn with_heartrate(mut self, heartrate: ::models::HeartrateStream) -> StreamSet {
    self.heartrate = Some(heartrate);
    self
  }

  pub fn heartrate(&self) -> Option<&::models::HeartrateStream> {
    self.heartrate.as_ref()
  }

  pub fn reset_heartrate(&mut self) {
    self.heartrate = None;
  }

  pub fn set_cadence(&mut self, cadence: ::models::CadenceStream) {
    self.cadence = Some(cadence);
  }

  pub fn with_cadence(mut self, cadence: ::models::CadenceStream) -> StreamSet {
    self.cadence = Some(cadence);
    self
  }

  pub fn cadence(&self) -> Option<&::models::CadenceStream> {
    self.cadence.as_ref()
  }

  pub fn reset_cadence(&mut self) {
    self.cadence = None;
  }

  pub fn set_watts(&mut self, watts: ::models::PowerStream) {
    self.watts = Some(watts);
  }

  pub fn with_watts(mut self, watts: ::models::PowerStream) -> StreamSet {
    self.watts = Some(watts);
    self
  }

  pub fn watts(&self) -> Option<&::models::PowerStream> {
    self.watts.as_ref()
  }

  pub fn reset_watts(&mut self) {
    self.watts = None;
  }

  pub fn set_temp(&mut self, temp: ::models::TemperatureStream) {
    self.temp = Some(temp);
  }

  pub fn with_temp(mut self, temp: ::models::TemperatureStream) -> StreamSet {
    self.temp = Some(temp);
    self
  }

  pub fn temp(&self) -> Option<&::models::TemperatureStream> {
    self.temp.as_ref()
  }

  pub fn reset_temp(&mut self) {
    self.temp = None;
  }

  pub fn set_moving(&mut self, moving: ::models::MovingStream) {
    self.moving = Some(moving);
  }

  pub fn with_moving(mut self, moving: ::models::MovingStream) -> StreamSet {
    self.moving = Some(moving);
    self
  }

  pub fn moving(&self) -> Option<&::models::MovingStream> {
    self.moving.as_ref()
  }

  pub fn reset_moving(&mut self) {
    self.moving = None;
  }

  pub fn set_grade_smooth(&mut self, grade_smooth: ::models::SmoothGradeStream) {
    self.grade_smooth = Some(grade_smooth);
  }

  pub fn with_grade_smooth(mut self, grade_smooth: ::models::SmoothGradeStream) -> StreamSet {
    self.grade_smooth = Some(grade_smooth);
    self
  }

  pub fn grade_smooth(&self) -> Option<&::models::SmoothGradeStream> {
    self.grade_smooth.as_ref()
  }

  pub fn reset_grade_smooth(&mut self) {
    self.grade_smooth = None;
  }

}



