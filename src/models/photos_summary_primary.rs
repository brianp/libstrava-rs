/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PhotosSummaryPrimary {
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "source")]
  source: Option<i32>,
  #[serde(rename = "unique_id")]
  unique_id: Option<String>,
  #[serde(rename = "urls")]
  urls: Option<::std::collections::HashMap<String, String>>
}

impl PhotosSummaryPrimary {
  pub fn new() -> PhotosSummaryPrimary {
    PhotosSummaryPrimary {
      id: None,
      source: None,
      unique_id: None,
      urls: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> PhotosSummaryPrimary {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_source(&mut self, source: i32) {
    self.source = Some(source);
  }

  pub fn with_source(mut self, source: i32) -> PhotosSummaryPrimary {
    self.source = Some(source);
    self
  }

  pub fn source(&self) -> Option<&i32> {
    self.source.as_ref()
  }

  pub fn reset_source(&mut self) {
    self.source = None;
  }

  pub fn set_unique_id(&mut self, unique_id: String) {
    self.unique_id = Some(unique_id);
  }

  pub fn with_unique_id(mut self, unique_id: String) -> PhotosSummaryPrimary {
    self.unique_id = Some(unique_id);
    self
  }

  pub fn unique_id(&self) -> Option<&String> {
    self.unique_id.as_ref()
  }

  pub fn reset_unique_id(&mut self) {
    self.unique_id = None;
  }

  pub fn set_urls(&mut self, urls: ::std::collections::HashMap<String, String>) {
    self.urls = Some(urls);
  }

  pub fn with_urls(mut self, urls: ::std::collections::HashMap<String, String>) -> PhotosSummaryPrimary {
    self.urls = Some(urls);
    self
  }

  pub fn urls(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.urls.as_ref()
  }

  pub fn reset_urls(&mut self) {
    self.urls = None;
  }

}



