/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Error {
  /// The code associated with this error.
  #[serde(rename = "code")]
  code: Option<String>,
  /// The specific field or aspect of the resource associated with this error.
  #[serde(rename = "field")]
  field: Option<String>,
  /// The type of resource associated with this error.
  #[serde(rename = "resource")]
  resource: Option<String>
}

impl Error {
  pub fn new() -> Error {
    Error {
      code: None,
      field: None,
      resource: None
    }
  }

  pub fn set_code(&mut self, code: String) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: String) -> Error {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&String> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

  pub fn set_field(&mut self, field: String) {
    self.field = Some(field);
  }

  pub fn with_field(mut self, field: String) -> Error {
    self.field = Some(field);
    self
  }

  pub fn field(&self) -> Option<&String> {
    self.field.as_ref()
  }

  pub fn reset_field(&mut self) {
    self.field = None;
  }

  pub fn set_resource(&mut self, resource: String) {
    self.resource = Some(resource);
  }

  pub fn with_resource(mut self, resource: String) -> Error {
    self.resource = Some(resource);
    self
  }

  pub fn resource(&self) -> Option<&String> {
    self.resource.as_ref()
  }

  pub fn reset_resource(&mut self) {
    self.resource = None;
  }

}



