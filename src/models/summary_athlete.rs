/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummaryAthlete {
  /// The unique identifier of the athlete
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
  #[serde(rename = "resource_state")]
  resource_state: Option<i32>,
  /// The athlete's first name.
  #[serde(rename = "firstname")]
  firstname: Option<String>,
  /// The athlete's last name.
  #[serde(rename = "lastname")]
  lastname: Option<String>,
  /// URL to a 62x62 pixel profile picture.
  #[serde(rename = "profile_medium")]
  profile_medium: Option<String>,
  /// URL to a 124x124 pixel profile picture.
  #[serde(rename = "profile")]
  profile: Option<String>,
  /// The athlete's city.
  #[serde(rename = "city")]
  city: Option<String>,
  /// The athlete's state or geographical region.
  #[serde(rename = "state")]
  state: Option<String>,
  /// The athlete's country.
  #[serde(rename = "country")]
  country: Option<String>,
  /// The athlete's sex.
  #[serde(rename = "sex")]
  sex: Option<String>,
  /// Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
  #[serde(rename = "premium")]
  premium: Option<bool>,
  /// Whether the athlete has any Summit subscription.
  #[serde(rename = "summit")]
  summit: Option<bool>,
  /// The time at which the athlete was created.
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  /// The time at which the athlete was last updated.
  #[serde(rename = "updated_at")]
  updated_at: Option<String>
}

impl SummaryAthlete {
  pub fn new() -> SummaryAthlete {
    SummaryAthlete {
      id: None,
      resource_state: None,
      firstname: None,
      lastname: None,
      profile_medium: None,
      profile: None,
      city: None,
      state: None,
      country: None,
      sex: None,
      premium: None,
      summit: None,
      created_at: None,
      updated_at: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> SummaryAthlete {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_resource_state(&mut self, resource_state: i32) {
    self.resource_state = Some(resource_state);
  }

  pub fn with_resource_state(mut self, resource_state: i32) -> SummaryAthlete {
    self.resource_state = Some(resource_state);
    self
  }

  pub fn resource_state(&self) -> Option<&i32> {
    self.resource_state.as_ref()
  }

  pub fn reset_resource_state(&mut self) {
    self.resource_state = None;
  }

  pub fn set_firstname(&mut self, firstname: String) {
    self.firstname = Some(firstname);
  }

  pub fn with_firstname(mut self, firstname: String) -> SummaryAthlete {
    self.firstname = Some(firstname);
    self
  }

  pub fn firstname(&self) -> Option<&String> {
    self.firstname.as_ref()
  }

  pub fn reset_firstname(&mut self) {
    self.firstname = None;
  }

  pub fn set_lastname(&mut self, lastname: String) {
    self.lastname = Some(lastname);
  }

  pub fn with_lastname(mut self, lastname: String) -> SummaryAthlete {
    self.lastname = Some(lastname);
    self
  }

  pub fn lastname(&self) -> Option<&String> {
    self.lastname.as_ref()
  }

  pub fn reset_lastname(&mut self) {
    self.lastname = None;
  }

  pub fn set_profile_medium(&mut self, profile_medium: String) {
    self.profile_medium = Some(profile_medium);
  }

  pub fn with_profile_medium(mut self, profile_medium: String) -> SummaryAthlete {
    self.profile_medium = Some(profile_medium);
    self
  }

  pub fn profile_medium(&self) -> Option<&String> {
    self.profile_medium.as_ref()
  }

  pub fn reset_profile_medium(&mut self) {
    self.profile_medium = None;
  }

  pub fn set_profile(&mut self, profile: String) {
    self.profile = Some(profile);
  }

  pub fn with_profile(mut self, profile: String) -> SummaryAthlete {
    self.profile = Some(profile);
    self
  }

  pub fn profile(&self) -> Option<&String> {
    self.profile.as_ref()
  }

  pub fn reset_profile(&mut self) {
    self.profile = None;
  }

  pub fn set_city(&mut self, city: String) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: String) -> SummaryAthlete {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&String> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> SummaryAthlete {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> SummaryAthlete {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_sex(&mut self, sex: String) {
    self.sex = Some(sex);
  }

  pub fn with_sex(mut self, sex: String) -> SummaryAthlete {
    self.sex = Some(sex);
    self
  }

  pub fn sex(&self) -> Option<&String> {
    self.sex.as_ref()
  }

  pub fn reset_sex(&mut self) {
    self.sex = None;
  }

  pub fn set_premium(&mut self, premium: bool) {
    self.premium = Some(premium);
  }

  pub fn with_premium(mut self, premium: bool) -> SummaryAthlete {
    self.premium = Some(premium);
    self
  }

  pub fn premium(&self) -> Option<&bool> {
    self.premium.as_ref()
  }

  pub fn reset_premium(&mut self) {
    self.premium = None;
  }

  pub fn set_summit(&mut self, summit: bool) {
    self.summit = Some(summit);
  }

  pub fn with_summit(mut self, summit: bool) -> SummaryAthlete {
    self.summit = Some(summit);
    self
  }

  pub fn summit(&self) -> Option<&bool> {
    self.summit.as_ref()
  }

  pub fn reset_summit(&mut self) {
    self.summit = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> SummaryAthlete {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> SummaryAthlete {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

}



