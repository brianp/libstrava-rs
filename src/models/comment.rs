/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Comment {
  /// The unique identifier of this comment
  #[serde(rename = "id")]
  id: Option<i64>,
  /// The identifier of the activity this comment is related to
  #[serde(rename = "activity_id")]
  activity_id: Option<i64>,
  /// The content of the comment
  #[serde(rename = "text")]
  text: Option<String>,
  #[serde(rename = "athlete")]
  athlete: Option<::models::SummaryAthlete>,
  /// The time at which this comment was created.
  #[serde(rename = "created_at")]
  created_at: Option<String>
}

impl Comment {
  pub fn new() -> Comment {
    Comment {
      id: None,
      activity_id: None,
      text: None,
      athlete: None,
      created_at: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> Comment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_activity_id(&mut self, activity_id: i64) {
    self.activity_id = Some(activity_id);
  }

  pub fn with_activity_id(mut self, activity_id: i64) -> Comment {
    self.activity_id = Some(activity_id);
    self
  }

  pub fn activity_id(&self) -> Option<&i64> {
    self.activity_id.as_ref()
  }

  pub fn reset_activity_id(&mut self) {
    self.activity_id = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = Some(text);
  }

  pub fn with_text(mut self, text: String) -> Comment {
    self.text = Some(text);
    self
  }

  pub fn text(&self) -> Option<&String> {
    self.text.as_ref()
  }

  pub fn reset_text(&mut self) {
    self.text = None;
  }

  pub fn set_athlete(&mut self, athlete: ::models::SummaryAthlete) {
    self.athlete = Some(athlete);
  }

  pub fn with_athlete(mut self, athlete: ::models::SummaryAthlete) -> Comment {
    self.athlete = Some(athlete);
    self
  }

  pub fn athlete(&self) -> Option<&::models::SummaryAthlete> {
    self.athlete.as_ref()
  }

  pub fn reset_athlete(&mut self) {
    self.athlete = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Comment {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

}



