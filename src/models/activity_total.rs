/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ActivityTotal : A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityTotal {
  /// The number of activities considered in this total.
  #[serde(rename = "count")]
  count: Option<i32>,
  /// The total distance covered by the considered activities.
  #[serde(rename = "distance")]
  distance: Option<f32>,
  /// The total moving time of the considered activities.
  #[serde(rename = "moving_time")]
  moving_time: Option<i32>,
  /// The total elapsed time of the considered activities.
  #[serde(rename = "elapsed_time")]
  elapsed_time: Option<i32>,
  /// The total elevation gain of the considered activities.
  #[serde(rename = "elevation_gain")]
  elevation_gain: Option<f32>,
  /// The total number of achievements of the considered activities.
  #[serde(rename = "achievement_count")]
  achievement_count: Option<i32>
}

impl ActivityTotal {
  /// A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
  pub fn new() -> ActivityTotal {
    ActivityTotal {
      count: None,
      distance: None,
      moving_time: None,
      elapsed_time: None,
      elevation_gain: None,
      achievement_count: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> ActivityTotal {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_distance(&mut self, distance: f32) {
    self.distance = Some(distance);
  }

  pub fn with_distance(mut self, distance: f32) -> ActivityTotal {
    self.distance = Some(distance);
    self
  }

  pub fn distance(&self) -> Option<&f32> {
    self.distance.as_ref()
  }

  pub fn reset_distance(&mut self) {
    self.distance = None;
  }

  pub fn set_moving_time(&mut self, moving_time: i32) {
    self.moving_time = Some(moving_time);
  }

  pub fn with_moving_time(mut self, moving_time: i32) -> ActivityTotal {
    self.moving_time = Some(moving_time);
    self
  }

  pub fn moving_time(&self) -> Option<&i32> {
    self.moving_time.as_ref()
  }

  pub fn reset_moving_time(&mut self) {
    self.moving_time = None;
  }

  pub fn set_elapsed_time(&mut self, elapsed_time: i32) {
    self.elapsed_time = Some(elapsed_time);
  }

  pub fn with_elapsed_time(mut self, elapsed_time: i32) -> ActivityTotal {
    self.elapsed_time = Some(elapsed_time);
    self
  }

  pub fn elapsed_time(&self) -> Option<&i32> {
    self.elapsed_time.as_ref()
  }

  pub fn reset_elapsed_time(&mut self) {
    self.elapsed_time = None;
  }

  pub fn set_elevation_gain(&mut self, elevation_gain: f32) {
    self.elevation_gain = Some(elevation_gain);
  }

  pub fn with_elevation_gain(mut self, elevation_gain: f32) -> ActivityTotal {
    self.elevation_gain = Some(elevation_gain);
    self
  }

  pub fn elevation_gain(&self) -> Option<&f32> {
    self.elevation_gain.as_ref()
  }

  pub fn reset_elevation_gain(&mut self) {
    self.elevation_gain = None;
  }

  pub fn set_achievement_count(&mut self, achievement_count: i32) {
    self.achievement_count = Some(achievement_count);
  }

  pub fn with_achievement_count(mut self, achievement_count: i32) -> ActivityTotal {
    self.achievement_count = Some(achievement_count);
    self
  }

  pub fn achievement_count(&self) -> Option<&i32> {
    self.achievement_count.as_ref()
  }

  pub fn reset_achievement_count(&mut self) {
    self.achievement_count = None;
  }

}



