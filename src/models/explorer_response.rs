/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ExplorerResponse {
  /// The set of segments matching an explorer request
  #[serde(rename = "segments")]
  segments: Option<Vec<::models::ExplorerSegment>>
}

impl ExplorerResponse {
  pub fn new() -> ExplorerResponse {
    ExplorerResponse {
      segments: None
    }
  }

  pub fn set_segments(&mut self, segments: Vec<::models::ExplorerSegment>) {
    self.segments = Some(segments);
  }

  pub fn with_segments(mut self, segments: Vec<::models::ExplorerSegment>) -> ExplorerResponse {
    self.segments = Some(segments);
    self
  }

  pub fn segments(&self) -> Option<&Vec<::models::ExplorerSegment>> {
    self.segments.as_ref()
  }

  pub fn reset_segments(&mut self) {
    self.segments = None;
  }

}



