/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DetailedClub {
  /// The club's unique identifier.
  #[serde(rename = "id")]
  id: Option<i32>,
  /// Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
  #[serde(rename = "resource_state")]
  resource_state: Option<i32>,
  /// The club's name.
  #[serde(rename = "name")]
  name: Option<String>,
  /// URL to a 60x60 pixel profile picture.
  #[serde(rename = "profile_medium")]
  profile_medium: Option<String>,
  /// URL to a ~1185x580 pixel cover photo.
  #[serde(rename = "cover_photo")]
  cover_photo: Option<String>,
  /// URL to a ~360x176  pixel cover photo.
  #[serde(rename = "cover_photo_small")]
  cover_photo_small: Option<String>,
  #[serde(rename = "sport_type")]
  sport_type: Option<String>,
  /// The club's city.
  #[serde(rename = "city")]
  city: Option<String>,
  /// The club's state or geographical region.
  #[serde(rename = "state")]
  state: Option<String>,
  /// The club's country.
  #[serde(rename = "country")]
  country: Option<String>,
  /// Whether the club is private.
  #[serde(rename = "private")]
  private: Option<bool>,
  /// The club's member count.
  #[serde(rename = "member_count")]
  member_count: Option<i32>,
  /// Whether the club is featured or not.
  #[serde(rename = "featured")]
  featured: Option<bool>,
  /// Whether the club is verified or not.
  #[serde(rename = "verified")]
  verified: Option<bool>,
  /// The club's vanity URL.
  #[serde(rename = "url")]
  url: Option<String>,
  /// The membership status of the logged-in athlete.
  #[serde(rename = "membership")]
  membership: Option<String>,
  /// Whether the currently logged-in athlete is an administrator of this club.
  #[serde(rename = "admin")]
  admin: Option<bool>,
  /// Whether the currently logged-in athlete is the owner of this club.
  #[serde(rename = "owner")]
  owner: Option<bool>,
  /// The number of athletes in the club that the logged-in athlete follows.
  #[serde(rename = "following_count")]
  following_count: Option<i32>
}

impl DetailedClub {
  pub fn new() -> DetailedClub {
    DetailedClub {
      id: None,
      resource_state: None,
      name: None,
      profile_medium: None,
      cover_photo: None,
      cover_photo_small: None,
      sport_type: None,
      city: None,
      state: None,
      country: None,
      private: None,
      member_count: None,
      featured: None,
      verified: None,
      url: None,
      membership: None,
      admin: None,
      owner: None,
      following_count: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> DetailedClub {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_resource_state(&mut self, resource_state: i32) {
    self.resource_state = Some(resource_state);
  }

  pub fn with_resource_state(mut self, resource_state: i32) -> DetailedClub {
    self.resource_state = Some(resource_state);
    self
  }

  pub fn resource_state(&self) -> Option<&i32> {
    self.resource_state.as_ref()
  }

  pub fn reset_resource_state(&mut self) {
    self.resource_state = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> DetailedClub {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_profile_medium(&mut self, profile_medium: String) {
    self.profile_medium = Some(profile_medium);
  }

  pub fn with_profile_medium(mut self, profile_medium: String) -> DetailedClub {
    self.profile_medium = Some(profile_medium);
    self
  }

  pub fn profile_medium(&self) -> Option<&String> {
    self.profile_medium.as_ref()
  }

  pub fn reset_profile_medium(&mut self) {
    self.profile_medium = None;
  }

  pub fn set_cover_photo(&mut self, cover_photo: String) {
    self.cover_photo = Some(cover_photo);
  }

  pub fn with_cover_photo(mut self, cover_photo: String) -> DetailedClub {
    self.cover_photo = Some(cover_photo);
    self
  }

  pub fn cover_photo(&self) -> Option<&String> {
    self.cover_photo.as_ref()
  }

  pub fn reset_cover_photo(&mut self) {
    self.cover_photo = None;
  }

  pub fn set_cover_photo_small(&mut self, cover_photo_small: String) {
    self.cover_photo_small = Some(cover_photo_small);
  }

  pub fn with_cover_photo_small(mut self, cover_photo_small: String) -> DetailedClub {
    self.cover_photo_small = Some(cover_photo_small);
    self
  }

  pub fn cover_photo_small(&self) -> Option<&String> {
    self.cover_photo_small.as_ref()
  }

  pub fn reset_cover_photo_small(&mut self) {
    self.cover_photo_small = None;
  }

  pub fn set_sport_type(&mut self, sport_type: String) {
    self.sport_type = Some(sport_type);
  }

  pub fn with_sport_type(mut self, sport_type: String) -> DetailedClub {
    self.sport_type = Some(sport_type);
    self
  }

  pub fn sport_type(&self) -> Option<&String> {
    self.sport_type.as_ref()
  }

  pub fn reset_sport_type(&mut self) {
    self.sport_type = None;
  }

  pub fn set_city(&mut self, city: String) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: String) -> DetailedClub {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&String> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> DetailedClub {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> DetailedClub {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_private(&mut self, private: bool) {
    self.private = Some(private);
  }

  pub fn with_private(mut self, private: bool) -> DetailedClub {
    self.private = Some(private);
    self
  }

  pub fn private(&self) -> Option<&bool> {
    self.private.as_ref()
  }

  pub fn reset_private(&mut self) {
    self.private = None;
  }

  pub fn set_member_count(&mut self, member_count: i32) {
    self.member_count = Some(member_count);
  }

  pub fn with_member_count(mut self, member_count: i32) -> DetailedClub {
    self.member_count = Some(member_count);
    self
  }

  pub fn member_count(&self) -> Option<&i32> {
    self.member_count.as_ref()
  }

  pub fn reset_member_count(&mut self) {
    self.member_count = None;
  }

  pub fn set_featured(&mut self, featured: bool) {
    self.featured = Some(featured);
  }

  pub fn with_featured(mut self, featured: bool) -> DetailedClub {
    self.featured = Some(featured);
    self
  }

  pub fn featured(&self) -> Option<&bool> {
    self.featured.as_ref()
  }

  pub fn reset_featured(&mut self) {
    self.featured = None;
  }

  pub fn set_verified(&mut self, verified: bool) {
    self.verified = Some(verified);
  }

  pub fn with_verified(mut self, verified: bool) -> DetailedClub {
    self.verified = Some(verified);
    self
  }

  pub fn verified(&self) -> Option<&bool> {
    self.verified.as_ref()
  }

  pub fn reset_verified(&mut self) {
    self.verified = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> DetailedClub {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_membership(&mut self, membership: String) {
    self.membership = Some(membership);
  }

  pub fn with_membership(mut self, membership: String) -> DetailedClub {
    self.membership = Some(membership);
    self
  }

  pub fn membership(&self) -> Option<&String> {
    self.membership.as_ref()
  }

  pub fn reset_membership(&mut self) {
    self.membership = None;
  }

  pub fn set_admin(&mut self, admin: bool) {
    self.admin = Some(admin);
  }

  pub fn with_admin(mut self, admin: bool) -> DetailedClub {
    self.admin = Some(admin);
    self
  }

  pub fn admin(&self) -> Option<&bool> {
    self.admin.as_ref()
  }

  pub fn reset_admin(&mut self) {
    self.admin = None;
  }

  pub fn set_owner(&mut self, owner: bool) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: bool) -> DetailedClub {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&bool> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_following_count(&mut self, following_count: i32) {
    self.following_count = Some(following_count);
  }

  pub fn with_following_count(mut self, following_count: i32) -> DetailedClub {
    self.following_count = Some(following_count);
    self
  }

  pub fn following_count(&self) -> Option<&i32> {
    self.following_count.as_ref()
  }

  pub fn reset_following_count(&mut self) {
    self.following_count = None;
  }

}



