/* 
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Split {
  /// The average speed of this split, in meters per second
  #[serde(rename = "average_speed")]
  average_speed: Option<f32>,
  /// The distance of this split, in meters
  #[serde(rename = "distance")]
  distance: Option<f32>,
  /// The elapsed time of this split, in seconds
  #[serde(rename = "elapsed_time")]
  elapsed_time: Option<i32>,
  /// The elevation difference of this split, in meters
  #[serde(rename = "elevation_difference")]
  elevation_difference: Option<f32>,
  /// The pacing zone of this split
  #[serde(rename = "pace_zone")]
  pace_zone: Option<i32>,
  /// The moving time of this split, in seconds
  #[serde(rename = "moving_time")]
  moving_time: Option<i32>,
  /// N/A
  #[serde(rename = "split")]
  split: Option<i32>
}

impl Split {
  pub fn new() -> Split {
    Split {
      average_speed: None,
      distance: None,
      elapsed_time: None,
      elevation_difference: None,
      pace_zone: None,
      moving_time: None,
      split: None
    }
  }

  pub fn set_average_speed(&mut self, average_speed: f32) {
    self.average_speed = Some(average_speed);
  }

  pub fn with_average_speed(mut self, average_speed: f32) -> Split {
    self.average_speed = Some(average_speed);
    self
  }

  pub fn average_speed(&self) -> Option<&f32> {
    self.average_speed.as_ref()
  }

  pub fn reset_average_speed(&mut self) {
    self.average_speed = None;
  }

  pub fn set_distance(&mut self, distance: f32) {
    self.distance = Some(distance);
  }

  pub fn with_distance(mut self, distance: f32) -> Split {
    self.distance = Some(distance);
    self
  }

  pub fn distance(&self) -> Option<&f32> {
    self.distance.as_ref()
  }

  pub fn reset_distance(&mut self) {
    self.distance = None;
  }

  pub fn set_elapsed_time(&mut self, elapsed_time: i32) {
    self.elapsed_time = Some(elapsed_time);
  }

  pub fn with_elapsed_time(mut self, elapsed_time: i32) -> Split {
    self.elapsed_time = Some(elapsed_time);
    self
  }

  pub fn elapsed_time(&self) -> Option<&i32> {
    self.elapsed_time.as_ref()
  }

  pub fn reset_elapsed_time(&mut self) {
    self.elapsed_time = None;
  }

  pub fn set_elevation_difference(&mut self, elevation_difference: f32) {
    self.elevation_difference = Some(elevation_difference);
  }

  pub fn with_elevation_difference(mut self, elevation_difference: f32) -> Split {
    self.elevation_difference = Some(elevation_difference);
    self
  }

  pub fn elevation_difference(&self) -> Option<&f32> {
    self.elevation_difference.as_ref()
  }

  pub fn reset_elevation_difference(&mut self) {
    self.elevation_difference = None;
  }

  pub fn set_pace_zone(&mut self, pace_zone: i32) {
    self.pace_zone = Some(pace_zone);
  }

  pub fn with_pace_zone(mut self, pace_zone: i32) -> Split {
    self.pace_zone = Some(pace_zone);
    self
  }

  pub fn pace_zone(&self) -> Option<&i32> {
    self.pace_zone.as_ref()
  }

  pub fn reset_pace_zone(&mut self) {
    self.pace_zone = None;
  }

  pub fn set_moving_time(&mut self, moving_time: i32) {
    self.moving_time = Some(moving_time);
  }

  pub fn with_moving_time(mut self, moving_time: i32) -> Split {
    self.moving_time = Some(moving_time);
    self
  }

  pub fn moving_time(&self) -> Option<&i32> {
    self.moving_time.as_ref()
  }

  pub fn reset_moving_time(&mut self) {
    self.moving_time = None;
  }

  pub fn set_split(&mut self, split: i32) {
    self.split = Some(split);
  }

  pub fn with_split(mut self, split: i32) -> Split {
    self.split = Some(split);
    self
  }

  pub fn split(&self) -> Option<&i32> {
    self.split.as_ref()
  }

  pub fn reset_split(&mut self) {
    self.split = None;
  }

}



